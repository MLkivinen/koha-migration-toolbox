<?xml version="1.0" encoding="utf-8"?><xsl:stylesheet version="1.0"	xmlns:marc="http://www.loc.gov/MARC21/slim"	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"><xsl:output method="xml" indent="yes" encoding="UTF-8"/><xsl:template match="RECORDBATCH">	<collection xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">		<xsl:apply-templates />	</collection></xsl:template><xsl:template match="FULLRECORD">	<record>	  <xsl:call-template name="leadergenerator">	   <xsl:with-param name="biblvl">	     <xsl:value-of select="BIB/IIIRECORD/TYPEINFO/BIBLIOGRAPHIC/FIXFLD[FIXLABEL = 'BIB LVL']/FIXVALUE" />          </xsl:with-param>
	<!-- insert mat type codes into leader 06 position (cca)-->
	<xsl:with-param name="mattype">             
		<xsl:value-of select="BIB/IIIRECORD/TYPEINFO/BIBLIOGRAPHIC/FIXFLD[FIXLABEL='MAT TYPE']/FIXVALUE" />
	</xsl:with-param>		</xsl:call-template> <!-- Process the MARC in the bib varflds -->					<xsl:for-each select="BIB/IIIRECORD/VARFLD">			<xsl:choose>				<xsl:when test="MARCFIXDATA">					<xsl:element name="controlfield">						<xsl:attribute name="tag">							<xsl:value-of select="MARCINFO/MARCTAG" />						</xsl:attribute>						<xsl:value-of select="MARCFIXDATA" />					</xsl:element>				</xsl:when>                     				<xsl:when test="MARCINFO">					<xsl:element name="datafield">						<xsl:attribute name="tag">							<xsl:value-of select="MARCINFO/MARCTAG" />						</xsl:attribute>						<xsl:attribute name="ind1">							<xsl:value-of select="MARCINFO/INDICATOR1" />						</xsl:attribute>						<xsl:attribute name="ind2">							<xsl:value-of select="MARCINFO/INDICATOR2" />						</xsl:attribute>						<xsl:for-each select="MARCSUBFLD">							<xsl:element name="subfield">								<xsl:attribute name="code">									<xsl:value-of select="SUBFIELDINDICATOR" />								</xsl:attribute>								<xsl:value-of select="SUBFIELDDATA" />							</xsl:element>						</xsl:for-each>					</xsl:element>				</xsl:when>              				</xsl:choose>  		</xsl:for-each>

<!-- MARC is processed, now time for bib fixflds to go into 942 field -->             <xsl:element name="datafield">         <xsl:attribute name="tag">942</xsl:attribute>			<xsl:attribute name="ind1"> </xsl:attribute>			<xsl:attribute name="ind2"> </xsl:attribute>			<xsl:element name="subfield">				<xsl:attribute name="code">2</xsl:attribute>lcc</xsl:element>			<xsl:element name="subfield">				<xsl:attribute name="code">b</xsl:attribute>				<xsl:value-of select="BIB/@number"/>			</xsl:element>			<xsl:element name="subfield">				<xsl:attribute name="code">d</xsl:attribute>				<xsl:call-template name="dateprocessing">            		<xsl:with-param name="date">                		<xsl:value-of select="BIB/IIIRECORD/RECORDINFO/CREATEDATE" />          			</xsl:with-param>				</xsl:call-template> 			</xsl:element>         	<xsl:for-each select="BIB/IIIRECORD/TYPEINFO/BIBLIOGRAPHIC/FIXFLD">        		<xsl:call-template name="field942">            		<xsl:with-param name="biblabel">                		<xsl:value-of select="FIXLABEL" />          			</xsl:with-param>             		<xsl:with-param name="bibvalue">                		<xsl:value-of select="FIXVALUE" />            		</xsl:with-param>        		</xsl:call-template>         		</xsl:for-each>		</xsl:element><!-- Process the MARC in the checkin varflds into MFHD -->		<xsl:for-each select="CHECKIN[IIIRECORD/VARFLD/MARCINFO]">	        	<xsl:comment>Start checkin record <xsl:value-of select="@number"/></xsl:comment>					<xsl:for-each select="IIIRECORD/VARFLD[MARCINFO]">				<xsl:element name="datafield">					<xsl:attribute name="tag">						<xsl:value-of select="MARCINFO/MARCTAG" />					</xsl:attribute>					<xsl:attribute name="ind1">						<xsl:value-of select="MARCINFO/INDICATOR1" />					</xsl:attribute>					<xsl:attribute name="ind2">						<xsl:value-of select="MARCINFO/INDICATOR2" />					</xsl:attribute>					<xsl:for-each select="MARCSUBFLD">						<xsl:element name="subfield">							<xsl:attribute name="code">								<xsl:value-of select="SUBFIELDINDICATOR" />							</xsl:attribute>							<xsl:value-of select="SUBFIELDDATA" />						</xsl:element>					</xsl:for-each>				</xsl:element>   			</xsl:for-each>         	<xsl:comment>End checkin record <xsl:value-of select="@number"/></xsl:comment>		</xsl:for-each>	 <!-- item info into the 952 fields, from both fixfld and varfld -->		<xsl:for-each select="ITEM">  			<xsl:element name="datafield">  				<xsl:attribute name="tag">952</xsl:attribute>				<xsl:attribute name="ind1"> </xsl:attribute>				<xsl:attribute name="ind2"> </xsl:attribute>         		<xsl:element name="subfield">					<xsl:attribute name="code">i</xsl:attribute>					<xsl:value-of select="normalize-space(@number)"/>			</xsl:element>         		<xsl:element name="subfield">					<xsl:attribute name="code">d</xsl:attribute>					<xsl:call-template name="dateprocessing">         					<xsl:with-param name="date">             					<xsl:value-of select="IIIRECORD/RECORDINFO/CREATEDATE" />       						</xsl:with-param>          				</xsl:call-template> 			</xsl:element>	
		<!--add last updated date to 952 r, Date last seen field (cca)-->  
			<xsl:element name="subfield">					<xsl:attribute name="code">r</xsl:attribute>					<xsl:call-template name="dateprocessing">         					<xsl:with-param name="date">             					<xsl:value-of select="IIIRECORD/RECORDINFO/LASTUPDATEDATE" />       						</xsl:with-param>          				</xsl:call-template> 			</xsl:element>
		<!--send I TYPE, LOCATION, and MAT TYPE to itemdetangler for Koha item types (cca)-->   				<xsl:element name="subfield">                            <xsl:attribute name="code">y</xsl:attribute>                          				<xsl:call-template name="itemdetangler">                                <xsl:with-param name="location">                  <xsl:value-of select="normalize-space(IIIRECORD/TYPEINFO/ITEM/FIXFLD[FIXLABEL='LOCATION']/FIXVALUE)" />                                </xsl:with-param>                                <xsl:with-param name="itype">                  <xsl:value-of select="normalize-space(IIIRECORD/TYPEINFO/ITEM/FIXFLD[FIXLABEL='I TYPE']/FIXVALUE)" />
				</xsl:with-param>
				<xsl:with-param name="mattype">      <xsl:value-of select="normalize-space(../BIB/IIIRECORD/TYPEINFO/BIBLIOGRAPHIC/FIXFLD[FIXLABEL='MAT TYPE']/FIXVALUE)" />
				</xsl:with-param>                               </xsl:call-template>                </xsl:element>	
	<!-- send VOLUME (changed from VOL) and LOC DETAIL to volcombiner to combine into 952$h (cca)-->		
		<xsl:call-template name="volcombiner">		
			<xsl:with-param name="volume">                		<xsl:value-of select="IIIRECORD/VARFLD[HEADER/TAG='VOLUME']/FIELDDATA" />                	</xsl:with-param>                	<xsl:with-param name="locdetail">                		<xsl:value-of select="IIIRECORD/TYPEINFO/ITEM/FIXFLD[FIXLABEL='LOC DETAIL']/FIXVALUE" />
			</xsl:with-param>                </xsl:call-template>		
	<!-- send NOTE and MESSAGE and DONOR fields into notecombiner to combine into 952$x (cca) -->
		 <xsl:call-template name="notecombiner">                                <xsl:with-param name="note">                    <xsl:value-of select="normalize-space(IIIRECORD/VARFLD[HEADER/TAG='NOTE']/MARCFIXDATA)" />                                </xsl:with-param>
				<xsl:with-param name="note2">                    <xsl:value-of select="normalize-space(IIIRECORD/VARFLD[HEADER/TAG='NOTE']/FIELDDATA)" />                                </xsl:with-param>                                <xsl:with-param name="message">                    <xsl:value-of select="normalize-space(IIIRECORD/VARFLD[HEADER/TAG='MESSAGE']/FIELDDATA)" />
				</xsl:with-param>
				<xsl:with-param name="donor">                    <xsl:value-of select="normalize-space(IIIRECORD/VARFLD[HEADER/TAG='DONOR']/FIELDDATA)" />
				</xsl:with-param>                               </xsl:call-template>   	<!-- send following to 952 template-->				
		<xsl:for-each select="IIIRECORD/TYPEINFO/ITEM/FIXFLD">     				<xsl:call-template name="field952">         				<xsl:with-param name="itemlabel">             				<xsl:value-of select="FIXLABEL" />       					</xsl:with-param>          				<xsl:with-param name="itemvalue">             				<xsl:value-of select="FIXVALUE" />         				</xsl:with-param>     				</xsl:call-template>         				</xsl:for-each>				<xsl:for-each select="IIIRECORD/VARFLD">	     				<xsl:call-template name="field952">	         				<xsl:with-param name="itemlabel">	             				<xsl:value-of select="HEADER/TAG" />	       					</xsl:with-param> 	         				<xsl:with-param name="itemvalue">	             				<xsl:value-of select="FIELDDATA" />	         				</xsl:with-param>	     				</xsl:call-template>         				</xsl:for-each>
<!--item call # create 952$o from (1) MARC 090 or (2) MARC 050 (cca) -->
		<xsl:for-each select="../BIB/IIIRECORD/VARFLD[MARCINFO/MARCTAG='090']">
				<xsl:element name="subfield">
				<xsl:attribute name="code">o</xsl:attribute>
				<xsl:for-each select="MARCSUBFLD">							<xsl:value-of select="normalize-space(SUBFIELDDATA)" />
				</xsl:for-each>		
				</xsl:element>
			</xsl:for-each>
			<xsl:for-each select="../BIB/IIIRECORD/VARFLD[MARCINFO/MARCTAG='050']">
				<xsl:element name="subfield">
				<xsl:attribute name="code">o</xsl:attribute>
				<xsl:for-each select="MARCSUBFLD">							<xsl:value-of select="normalize-space(SUBFIELDDATA)" />
				</xsl:for-each>		
				</xsl:element>
			</xsl:for-each>
			<xsl:for-each select="../BIB/IIIRECORD/VARFLD[MARCINFO/MARCTAG='099']">
				<xsl:element name="subfield">
				<xsl:attribute name="code">o</xsl:attribute>
				<xsl:for-each select="MARCSUBFLD">							<xsl:value-of select="normalize-space(SUBFIELDDATA)" />
				</xsl:for-each>		
				</xsl:element>
			</xsl:for-each>
			</xsl:element>		
		</xsl:for-each>		<!-- All done! -->		                				   </record>	</xsl:template><xsl:template name="field942">	<xsl:param name="biblabel"/>   <xsl:param name="bibvalue"/>	<xsl:choose>		<xsl:when test="$biblabel = 'BCODE3'">			<xsl:if test="$bibvalue = 'n'">				<xsl:element name="subfield">					<xsl:attribute name="code">n</xsl:attribute>1</xsl:element>			</xsl:if>		</xsl:when>		<xsl:when test="$biblabel = 'BIB LVL'">			<xsl:if test="$bibvalue = 's'">				<xsl:element name="subfield">					<xsl:attribute name="code">s</xsl:attribute>1</xsl:element>			</xsl:if>		</xsl:when>
	<!--import material type into 942$t (cca)-->		
		<xsl:when test="$biblabel = 'MAT TYPE'">			<xsl:element name="subfield">				<xsl:attribute name="code">t</xsl:attribute>
				<xsl:value-of select="$bibvalue" /> 			
			</xsl:element>		</xsl:when>	</xsl:choose></xsl:template><xsl:template name="leadergenerator">
<!--changed this to insert 'a' in the 9th space for unicode (cca)-->  <xsl:param name="biblvl"/>
<xsl:param name="mattype"/>  <xsl:element name="leader">    <xsl:choose>
	<xsl:when test="$mattype = 's' or $mattype = '@' or $mattype = 'z' or $mattype = 'x' or $mattype = 'y' and $biblvl = 'e'">00000cps a2200000la 4500</xsl:when>
<xsl:when test="$mattype = 's' or $mattype = '@' or $mattype = 'z' or $mattype = 'x' or $mattype = 'y' and $biblvl != 'e'">00000cpm a2200000la 4500</xsl:when>      	<xsl:when test="$biblvl = 'e'">00000c<xsl:value-of select="$mattype"/>s a2200000la 4500</xsl:when>      	<xsl:otherwise>00000c<xsl:value-of select="$mattype"/><xsl:value-of select="$biblvl"/> a2200000la 4500</xsl:otherwise>    </xsl:choose>   </xsl:element> </xsl:template><xsl:template name="field952">	<xsl:param name="itemlabel"/>	<xsl:param name="itemvalue"/>	<!--changed from LOC to LOCATION to match our xrecord labels (cca)-->	
	<xsl:if test="$itemlabel = 'LOCATION'"> 		<xsl:call-template name="locationdetangler">     		<xsl:with-param name="locationcode" select="normalize-space($itemvalue)" />     	</xsl:call-template>     	</xsl:if>        	<xsl:choose>		<xsl:when test="$itemlabel = 'BARCODE'">        	<xsl:if test="not($itemvalue = 'do not')">				<xsl:element name="subfield">					<xsl:attribute name="code">p</xsl:attribute>					<xsl:value-of select="$itemvalue" />  				</xsl:element>            </xsl:if>    		</xsl:when>   		<xsl:when test="$itemlabel = 'PRICE'">			<xsl:if test="$itemvalue != '$0.00'">  				<xsl:element name="subfield">  					<xsl:attribute name="code">g</xsl:attribute>					<xsl:value-of select="$itemvalue" />   				</xsl:element>   			</xsl:if>		</xsl:when>    		<xsl:when test="$itemlabel = 'LOUTDATE' and $itemvalue != '  -  -  '">   			<xsl:element name="subfield">				<xsl:attribute name="code">s</xsl:attribute>				<xsl:call-template name="dateprocessing">            				<xsl:with-param name="date">                				<xsl:value-of select="$itemvalue" />          				</xsl:with-param>             			</xsl:call-template>  			</xsl:element>   		</xsl:when>    		<xsl:when test="$itemlabel = 'STATUS'">			<xsl:choose>			<!-- lib use only and locked case (cca)-->									<xsl:when test="$itemvalue = 'o'">					<xsl:element name="subfield">						<xsl:attribute name="code">7</xsl:attribute>1</xsl:element>  				</xsl:when>				<xsl:when test="$itemvalue = 'x'">					<xsl:element name="subfield">						<xsl:attribute name="code">7</xsl:attribute>1</xsl:element>  				</xsl:when>			<!-- on order (cca) -->					<xsl:when test="$itemvalue = '?'">          				<xsl:element name="subfield"> 				 <xsl:attribute name="code">7</xsl:attribute>-1</xsl:element> 				 </xsl:when>			<!-- lost and paid (cca) -->					<xsl:when test="$itemvalue = '$'">					<xsl:element name="subfield">						<xsl:attribute name="code">1</xsl:attribute>5</xsl:element>  				</xsl:when>			<!-- missing (cca) -->				<xsl:when test="$itemvalue = 'm'">					<xsl:element name="subfield">						<xsl:attribute name="code">1</xsl:attribute>1</xsl:element>  				</xsl:when>			<!-- billed (cca) -->				<xsl:when test="$itemvalue = 'n'">					<xsl:element name="subfield">						<xsl:attribute name="code">1</xsl:attribute>2</xsl:element>  				</xsl:when>			<!-- claims rtd (cca) -->				<xsl:when test="$itemvalue = 'z'">					<xsl:element name="subfield">						<xsl:attribute name="code">1</xsl:attribute>4</xsl:element>  				</xsl:when> 			<!-- on search (cca) -->				<xsl:when test="$itemvalue = 's'">					<xsl:element name="subfield">						<xsl:attribute name="code">1</xsl:attribute>3</xsl:element>  				</xsl:when> 			<!-- bindery (cca) -->				<xsl:when test="$itemvalue = 'b'">					<xsl:element name="subfield">						<xsl:attribute name="code">4</xsl:attribute>1</xsl:element>  				</xsl:when> 			<!-- repair (cca) -->				<xsl:when test="$itemvalue = 'r'">					<xsl:element name="subfield">						<xsl:attribute name="code">4</xsl:attribute>2</xsl:element>  				</xsl:when>			<!-- backup copy (cca) -->				<xsl:when test="$itemvalue = 'u'">					<xsl:element name="subfield">						<xsl:attribute name="code">7</xsl:attribute>3</xsl:element>  				</xsl:when>			</xsl:choose>		</xsl:when>		<xsl:when test="$itemlabel = 'ICODE2'">			<xsl:choose>		
			<!-- withdrawn (cca) -->						<xsl:when test="$itemvalue = 'w'">					<xsl:element name="subfield">						<xsl:attribute name="code">0</xsl:attribute>1</xsl:element>  				</xsl:when>
			<!-- suppress (cca) -->						<xsl:when test="$itemvalue = 'n'">					<xsl:element name="subfield">						<xsl:attribute name="code">7</xsl:attribute>4</xsl:element>  				</xsl:when>

			<!-- keep in cat (cca) -->						<xsl:when test="$itemvalue = 'y'">					<xsl:element name="subfield">						<xsl:attribute name="code">7</xsl:attribute>5</xsl:element>  				</xsl:when>
			<!-- keep for patron record (cca) -->						<xsl:when test="$itemvalue = 'p'">					<xsl:element name="subfield">						<xsl:attribute name="code">7</xsl:attribute>6</xsl:element>  				</xsl:when>
			<!-- order rep (cca) -->						<xsl:when test="$itemvalue = 'o'">					<xsl:element name="subfield">						<xsl:attribute name="code">7</xsl:attribute>7</xsl:element>  				</xsl:when>
			<!-- gone (cca) -->						<xsl:when test="$itemvalue = 'g'">					<xsl:element name="subfield">						<xsl:attribute name="code">7</xsl:attribute>8</xsl:element>  				</xsl:when></xsl:choose>		</xsl:when>	    <xsl:when test="$itemlabel = 'VENDOR'"> 			<xsl:element name="subfield">       				<xsl:attribute name="code">e</xsl:attribute>				<xsl:value-of select="$itemvalue" />			</xsl:element>  		</xsl:when>
	<!-- this doesn't appear to do anything (cca)		<xsl:when test="$itemlabel = 'CALL #'"> 			
			<xsl:if test="$itemvalue!='Small Press Traffic'">
				<xsl:element name="subfield">       					<xsl:attribute name="code">o</xsl:attribute>					<xsl:value-of select="$itemvalue" />				</xsl:element> 
			</xsl:if> 		</xsl:when>-->		<xsl:when test="$itemlabel = 'TOT CHKOUT'">			<xsl:element name="subfield">				<xsl:attribute name="code">l</xsl:attribute>				<xsl:value-of select="$itemvalue" />			</xsl:element>  		</xsl:when>   		<xsl:when test="$itemlabel = 'TOT RENEW'">			<xsl:element name="subfield">				<xsl:attribute name="code">m</xsl:attribute>				<xsl:value-of select="$itemvalue" />			</xsl:element>  		</xsl:when>    		<!-- Unnecessary if using Circ State import script		<xsl:when test="$itemlabel = 'OUT DATE' and $itemvalue != '  -  -  '">			<xsl:element name="subfield">    				<xsl:attribute name="code">q</xsl:attribute>				<xsl:call-template name="dateprocessing">            	<xsl:with-param name="date">                	<xsl:value-of select="$itemvalue" />          		</xsl:with-param>             </xsl:call-template> 							</xsl:element> 		</xsl:when> -->		<xsl:when test="$itemlabel = 'COPY #'">			<xsl:if test="$itemvalue > 1">				<xsl:element name="subfield">									<xsl:attribute name="code">t</xsl:attribute>					<xsl:value-of select="$itemvalue" />				</xsl:element>	  			</xsl:if>					</xsl:when>  	<!-- DONOR field into 952 z public note 			<xsl:when test="$itemlabel = 'DONOR'">			<xsl:element name="subfield">				<xsl:attribute name="code">z</xsl:attribute>				<xsl:value-of select="$itemvalue" />			</xsl:element>  		</xsl:when>-->          	               	</xsl:choose>                  </xsl:template><xsl:template name="itemdetangler">	<xsl:param name="location"/>		<xsl:param name="itype"/>
	<xsl:param name="mattype"/>	<xsl:choose>
		<xsl:when test="$mattype = 'o'">KIT</xsl:when>
		<xsl:when test="$mattype = 'e'">MAP</xsl:when>		<xsl:when test="$itype = 3">VHS</xsl:when>		<xsl:when test="$itype = 5">TAPE</xsl:when>		<xsl:when test="$itype = 6">CD</xsl:when>		<xsl:when test="$itype = 7">CDS</xsl:when>		<xsl:when test="$itype = 9">DVD</xsl:when>		<xsl:when test="$itype = 10">PIC</xsl:when>		<xsl:when test="$itype = 11">PIC</xsl:when>		<xsl:when test="$itype = 13">EQP</xsl:when>		<xsl:when test="$itype = 15">REAL</xsl:when>		<xsl:when test="$itype = 20">RDR</xsl:when>		<xsl:when test="$itype = 21">RPC</xsl:when>		<xsl:when test="$itype = '12' and $location != 'sfth' and $location != 'mnth'">MSS</xsl:when>		<xsl:when test="$location = 'cca'">BK</xsl:when>		<xsl:when test="$location = 'mnab'">BWK</xsl:when>		<xsl:when test="$location = 'mnbnd'">PERB</xsl:when>		<xsl:when test="$location = 'mnfo'">BK</xsl:when>		<xsl:when test="$location = 'mnmi'">BK</xsl:when> 					<xsl:when test="$location = 'mnnb'">BK</xsl:when>		    			<xsl:when test="$location = 'mnper'">PERC</xsl:when>		<xsl:when test="$location = 'mnree'">BK</xsl:when>					<xsl:when test="$location = 'mnth'">THS</xsl:when>		<xsl:when test="$location = 'net'">ERES</xsl:when> 		<xsl:when test="$location = 'www'">ERES</xsl:when> 	    	<xsl:when test="$location = 'sfbnd'">PERB</xsl:when>		<xsl:when test="$location = 'sffo'">BK</xsl:when>		<xsl:when test="$location = 'sfper'">PERC</xsl:when>		<xsl:when test="$location = 'sfraf'">BK</xsl:when>		<xsl:when test="$location = 'sfst'">BK</xsl:when> 		<xsl:when test="$location = 'sfstm'">BK</xsl:when> 	    	<xsl:when test="$location = 'sfsxm'">BK</xsl:when>		<xsl:when test="$location = 'sfth'">THS</xsl:when>			<xsl:when test="$location = 'ccam' and $itype = '0'">BK</xsl:when>			<xsl:when test="$location = 'ccam' and $itype = '1'">BK</xsl:when>			<xsl:when test="$location = 'ccam' and $itype = '2'">PERC</xsl:when>			<xsl:when test="$location = 'mn' and $itype = '0'">BK</xsl:when>			<xsl:when test="$location = 'mn' and $itype = '2'">PERC</xsl:when>			<xsl:when test="$location = 'mncsp' and $itype = '0'">BK</xsl:when>			<xsl:when test="$location = 'mncsp' and $itype = '2'">PERC</xsl:when>			<xsl:when test="$location = 'mndsk' and $itype = '0'">BK</xsl:when>			<xsl:when test="$location = 'mndsk' and $itype = '2'">PERB</xsl:when>			<xsl:when test="$location = 'mndsx' and $itype = '0'">BK</xsl:when>			<xsl:when test="$location = 'mndsx' and $itype = '2'">PERB</xsl:when>			<xsl:when test="$location = 'mnra' and $itype = '0'">BK</xsl:when>			<xsl:when test="$location = 'mnra' and $itype = '2'">PERB</xsl:when>					<xsl:when test="$location = 'mnraf' and $itype = '0'">BK</xsl:when>			<xsl:when test="$location = 'mnraf' and $itype = '2'">PERB</xsl:when>			<xsl:when test="$location = 'mnref' and $itype = '0'">BK</xsl:when>			<xsl:when test="$location = 'mnres' and $itype = '0'">BK</xsl:when>			<xsl:when test="$location = 'mnrsd' and $itype = '0'">BK</xsl:when> 		        <xsl:when test="$location = 'mnst' and $itype = '0'">BK</xsl:when>			<xsl:when test="$location = 'mnst' and $itype = '1'">BK</xsl:when>			<xsl:when test="$location = 'mnst' and $itype = '2'">PERC</xsl:when>			<xsl:when test="$location = 'mnstx' and $itype = '0'">BK</xsl:when>			<xsl:when test="$location = 'mnstx' and $itype = '1'">BK</xsl:when>			<xsl:when test="$location = 'mnstx' and $itype = '2'">PERC</xsl:when>			<xsl:when test="$location = 'mnun' and $itype = '0'">BK</xsl:when>			<xsl:when test="$location = 'sf' and $itype = '0'">BK</xsl:when>			<xsl:when test="$location = 'sfarc' and $itype = '0'">BK</xsl:when>			<xsl:when test="$location = 'sfdsk' and $itype = '0'">BK</xsl:when>			<xsl:when test="$location = 'sfdsk' and $itype = '2'">PERB</xsl:when> 	    	        <xsl:when test="$location = 'sfref' and $itype = '0'">BK</xsl:when>			<xsl:when test="$location = 'sfres' and $itype = '0'">BK</xsl:when>			<xsl:when test="$location = 'sfrsd' and $itype = '0'">BK</xsl:when>			<xsl:when test="$location = 'sfspt' and $itype = '0'">BK</xsl:when>
		<xsl:otherwise>BK</xsl:otherwise>	</xsl:choose>        					</xsl:template>
<xsl:template name="locationdetangler">	<xsl:param name="locationcode"/>	    <!-- Home Branch first; should match Koha > Administration > Libraries and Groups--> 	<xsl:element name="subfield"> 		<xsl:attribute name="code">a</xsl:attribute> 		<xsl:choose>		<xsl:when test="starts-with($locationcode, 'mn')">oak</xsl:when>         	<xsl:when test="starts-with($locationcode, 'sf')">sf</xsl:when>		<xsl:when test="starts-with($locationcode, 'cca')">oak</xsl:when>		<xsl:when test="starts-with($locationcode, 'net')">online</xsl:when>		<xsl:when test="starts-with($locationcode, 'www')">online</xsl:when>         	<xsl:otherwise>xxx</xsl:otherwise>		</xsl:choose> 	</xsl:element>  <!-- Now Holding Branch; should match Koha > Administration > Libraries and Groups--> 	<xsl:element name="subfield"> 		<xsl:attribute name="code">b</xsl:attribute> 		<xsl:choose>		<xsl:when test="starts-with($locationcode, 'mn')">oak</xsl:when>         	<xsl:when test="starts-with($locationcode, 'sf')">sf</xsl:when>		<xsl:when test="starts-with($locationcode, 'cca')">oak</xsl:when>		<xsl:when test="starts-with($locationcode, 'net')">online</xsl:when>		<xsl:when test="starts-with($locationcode, 'www')">online</xsl:when>         	<xsl:otherwise>xxx</xsl:otherwise>		</xsl:choose> 	</xsl:element>  <!-- Koha Shelving location (LOC) -->   	<xsl:choose>		<xsl:when test="$locationcode = 'cca'">					<xsl:element name="subfield">  				 				<xsl:attribute name="code">c</xsl:attribute>cca</xsl:element>    </xsl:when> 		 <xsl:when test="$locationcode = 'ccam'"> 		 			<xsl:element name="subfield">  				 				<xsl:attribute name="code">c</xsl:attribute>ccam</xsl:element>
					<xsl:element name="subfield">						<xsl:attribute name="code">7</xsl:attribute>1</xsl:element>       </xsl:when> 		<xsl:when test="$locationcode = 'mn'"> 					<xsl:element name="subfield">  				 				<xsl:attribute name="code">c</xsl:attribute>mn</xsl:element>     </xsl:when> 	   <xsl:when test="$locationcode = 'mnab'"> 	   			<xsl:element name="subfield">  				 				<xsl:attribute name="code">c</xsl:attribute>mnab</xsl:element>
					<xsl:element name="subfield">						<xsl:attribute name="code">7</xsl:attribute>1</xsl:element>       </xsl:when> 	  <xsl:when test="$locationcode = 'mnarc'"> 	  			<xsl:element name="subfield">  				 				<xsl:attribute name="code">c</xsl:attribute>ccam</xsl:element>
					<xsl:element name="subfield">						<xsl:attribute name="code">7</xsl:attribute>1</xsl:element>      </xsl:when>		<xsl:when test="$locationcode = 'mnav'">			<xsl:element name="subfield"> 				<xsl:attribute name="code">c</xsl:attribute>mnav</xsl:element> 		</xsl:when> 		<xsl:when test="$locationcode = 'mnavx'"> 			<xsl:element name="subfield"> 				<xsl:attribute name="code">c</xsl:attribute>mnavx</xsl:element>
					<xsl:element name="subfield">						<xsl:attribute name="code">7</xsl:attribute>1</xsl:element>  		</xsl:when> 		<xsl:when test="$locationcode = 'mnbnd'"> 			<xsl:element name="subfield"> 				<xsl:attribute name="code">c</xsl:attribute>mnbnd</xsl:element>
					<xsl:element name="subfield">						<xsl:attribute name="code">7</xsl:attribute>1</xsl:element>  		</xsl:when> 		<xsl:when test="$locationcode = 'mncsp'"> 			<xsl:element name="subfield"> 				<xsl:attribute name="code">c</xsl:attribute>mncsp</xsl:element>
					<xsl:element name="subfield">						<xsl:attribute name="code">7</xsl:attribute>1</xsl:element>  		</xsl:when>		<xsl:when test="$locationcode = 'mndsk'">      			<xsl:element name="subfield"> 				<xsl:attribute name="code">c</xsl:attribute>mndsk</xsl:element> 		</xsl:when> 		<xsl:when test="$locationcode = 'mndsx'">      			<xsl:element name="subfield"> 				<xsl:attribute name="code">c</xsl:attribute>mndsx</xsl:element>
					<xsl:element name="subfield">						<xsl:attribute name="code">7</xsl:attribute>1</xsl:element>  		</xsl:when>   		<xsl:when test="$locationcode = 'mnfo'">      			<xsl:element name="subfield"> 				<xsl:attribute name="code">c</xsl:attribute>mnfo</xsl:element> 		</xsl:when>		<xsl:when test="$locationcode = 'mnmi'">      		<xsl:element name="subfield"> 				<xsl:attribute name="code">c</xsl:attribute>mnmi</xsl:element> 		</xsl:when> 		<xsl:when test="$locationcode = 'mnnb'"> 			<xsl:element name="subfield"> 				<xsl:attribute name="code">c</xsl:attribute>mnnb</xsl:element> 		</xsl:when> 		<xsl:when test="$locationcode = 'mnper'"> 			<xsl:element name="subfield"> 				<xsl:attribute name="code">c</xsl:attribute>mnper</xsl:element> 		</xsl:when> 		<xsl:when test="$locationcode = 'mnpic'"> 			<xsl:element name="subfield"> 				<xsl:attribute name="code">c</xsl:attribute>mnpic</xsl:element> 		</xsl:when> 		<xsl:when test="$locationcode = 'mnra'"> 			<xsl:element name="subfield"> 				<xsl:attribute name="code">c</xsl:attribute>mnra</xsl:element>
					<xsl:element name="subfield">						<xsl:attribute name="code">7</xsl:attribute>1</xsl:element>  		</xsl:when> 		<xsl:when test="$locationcode = 'mnraf'"> 			<xsl:element name="subfield"> 				<xsl:attribute name="code">c</xsl:attribute>mnraf</xsl:element>
					<xsl:element name="subfield">						<xsl:attribute name="code">7</xsl:attribute>1</xsl:element>  		</xsl:when> 		<xsl:when test="$locationcode = 'mnree'"> 			<xsl:element name="subfield"> 				<xsl:attribute name="code">c</xsl:attribute>mnree</xsl:element>
					<xsl:element name="subfield">						<xsl:attribute name="code">7</xsl:attribute>1</xsl:element>  		</xsl:when> 		<xsl:when test="$locationcode = 'mnref'"> 			<xsl:element name="subfield"> 				<xsl:attribute name="code">c</xsl:attribute>mnref</xsl:element>
					<xsl:element name="subfield">						<xsl:attribute name="code">7</xsl:attribute>1</xsl:element>  		</xsl:when> 		<xsl:when test="$locationcode = 'mnres'"> 			<xsl:element name="subfield"> 				<xsl:attribute name="code">c</xsl:attribute>mnres</xsl:element> 		</xsl:when> 		<xsl:when test="$locationcode = 'mnrsd'"> 			<xsl:element name="subfield"> 				<xsl:attribute name="code">c</xsl:attribute>mnrsd</xsl:element> 		</xsl:when> 		<xsl:when test="$locationcode = 'mnsl'">      		<xsl:element name="subfield"> 				<xsl:attribute name="code">c</xsl:attribute>mnsl</xsl:element> 		</xsl:when> 		<xsl:when test="$locationcode = 'mnst'">      		<xsl:element name="subfield"> 				<xsl:attribute name="code">c</xsl:attribute>mnst</xsl:element> 		</xsl:when> 		<xsl:when test="$locationcode = 'mnstx'">      		<xsl:element name="subfield"> 				<xsl:attribute name="code">c</xsl:attribute>mnstx</xsl:element>
					<xsl:element name="subfield">						<xsl:attribute name="code">7</xsl:attribute>1</xsl:element>  		</xsl:when> 		<xsl:when test="$locationcode = 'mnth'">      		<xsl:element name="subfield"> 				<xsl:attribute name="code">c</xsl:attribute>mnth</xsl:element>
					<xsl:element name="subfield">						<xsl:attribute name="code">7</xsl:attribute>1</xsl:element>  		</xsl:when> 		<xsl:when test="$locationcode = 'mnun'">      		<xsl:element name="subfield"> 				<xsl:attribute name="code">c</xsl:attribute>mnun</xsl:element> 		</xsl:when> 		<xsl:when test="$locationcode = 'net'">      		<xsl:element name="subfield"> 				<xsl:attribute name="code">c</xsl:attribute>net</xsl:element> 		</xsl:when>		<xsl:when test="$locationcode = 'www'">      		<xsl:element name="subfield"> 				<xsl:attribute name="code">c</xsl:attribute>net</xsl:element> 		</xsl:when>		<xsl:when test="$locationcode = 'sf'"> 					<xsl:element name="subfield">  				 				<xsl:attribute name="code">c</xsl:attribute>sf</xsl:element>     		</xsl:when>		<xsl:when test="$locationcode = 'sfarc'"> 					<xsl:element name="subfield">  				 				<xsl:attribute name="code">c</xsl:attribute>sfarc</xsl:element>
					<xsl:element name="subfield">						<xsl:attribute name="code">7</xsl:attribute>1</xsl:element>      		</xsl:when>		<xsl:when test="$locationcode = 'sfav'"> 					<xsl:element name="subfield">  				 				<xsl:attribute name="code">c</xsl:attribute>sfav</xsl:element>     		</xsl:when>				<xsl:when test="$locationcode = 'sfavx'"> 					<xsl:element name="subfield">  				 				<xsl:attribute name="code">c</xsl:attribute>sfavx</xsl:element>
					<xsl:element name="subfield">						<xsl:attribute name="code">7</xsl:attribute>1</xsl:element>      		</xsl:when>		<xsl:when test="$locationcode = 'sfbnd'"> 					<xsl:element name="subfield">  				 				<xsl:attribute name="code">c</xsl:attribute>sfbnd</xsl:element>
					<xsl:element name="subfield">						<xsl:attribute name="code">7</xsl:attribute>1</xsl:element>      		</xsl:when>		<xsl:when test="$locationcode = 'sfdsk'"> 					<xsl:element name="subfield">  				 				<xsl:attribute name="code">c</xsl:attribute>sfdsk</xsl:element>     		</xsl:when>		<xsl:when test="$locationcode = 'sffo'"> 					<xsl:element name="subfield">  				 				<xsl:attribute name="code">c</xsl:attribute>sffo</xsl:element> 		    </xsl:when>		<xsl:when test="$locationcode = 'sfnb'"> 					<xsl:element name="subfield">  				 				<xsl:attribute name="code">c</xsl:attribute>sfnb</xsl:element>     		</xsl:when>		<xsl:when test="$locationcode = 'sfper'"> 					<xsl:element name="subfield">  				 				<xsl:attribute name="code">c</xsl:attribute>sfper</xsl:element>     		</xsl:when>		<xsl:when test="$locationcode = 'sfra'"> 					<xsl:element name="subfield">  				 				<xsl:attribute name="code">c</xsl:attribute>sfra</xsl:element>
					<xsl:element name="subfield">						<xsl:attribute name="code">7</xsl:attribute>1</xsl:element>      		</xsl:when>		<xsl:when test="$locationcode = 'sfraf'"> 					<xsl:element name="subfield">  				 				<xsl:attribute name="code">c</xsl:attribute>sfraf</xsl:element>
					<xsl:element name="subfield">						<xsl:attribute name="code">7</xsl:attribute>1</xsl:element>      		</xsl:when>		<xsl:when test="$locationcode = 'sfref'"> 					<xsl:element name="subfield">  				 				<xsl:attribute name="code">c</xsl:attribute>sfref</xsl:element>
					<xsl:element name="subfield">						<xsl:attribute name="code">7</xsl:attribute>1</xsl:element>      		</xsl:when>		<xsl:when test="$locationcode = 'sfres'"> 					<xsl:element name="subfield">  				 				<xsl:attribute name="code">c</xsl:attribute>sfres</xsl:element>     		</xsl:when>		<xsl:when test="$locationcode = 'sfrsd'"> 					<xsl:element name="subfield">  				 				<xsl:attribute name="code">c</xsl:attribute>sfrsd</xsl:element>     		</xsl:when>		<xsl:when test="$locationcode = 'sfsl'"> 					<xsl:element name="subfield">  				 				<xsl:attribute name="code">c</xsl:attribute>sfsl</xsl:element>     		</xsl:when>		<xsl:when test="$locationcode = 'sfspt'"> 					<xsl:element name="subfield">  				 				<xsl:attribute name="code">c</xsl:attribute>sfspt</xsl:element>
					<xsl:element name="subfield">						<xsl:attribute name="code">7</xsl:attribute>1</xsl:element>      		</xsl:when>		<xsl:when test="$locationcode = 'sfst'"> 					<xsl:element name="subfield">  				 				<xsl:attribute name="code">c</xsl:attribute>sfst</xsl:element>     		</xsl:when>		<xsl:when test="$locationcode = 'sfstm'"> 					<xsl:element name="subfield">  				 				<xsl:attribute name="code">c</xsl:attribute>sfstm</xsl:element>     		</xsl:when>		<xsl:when test="$locationcode = 'sfsxm'"> 					<xsl:element name="subfield">  				 				<xsl:attribute name="code">c</xsl:attribute>sfsxm</xsl:element>
					<xsl:element name="subfield">						<xsl:attribute name="code">7</xsl:attribute>1</xsl:element>      		</xsl:when>		<xsl:when test="$locationcode = 'sfth'"> 					<xsl:element name="subfield">  				 				<xsl:attribute name="code">c</xsl:attribute>sfth</xsl:element>
					<xsl:element name="subfield">						<xsl:attribute name="code">7</xsl:attribute>1</xsl:element>      		</xsl:when>  </xsl:choose> 	                       </xsl:template>

<!-- this combines VOLUME and LOC DETAIL into the 952$h --><xsl:template name="volcombiner">	<xsl:param name="volume" />	<xsl:param name="locdetail" />
		<xsl:if test="$volume != '' or $locdetail != ''">			
			<xsl:element name="subfield">				<xsl:attribute name="code">h</xsl:attribute>				<xsl:value-of select="$volume" />
					<xsl:if test="$volume != '' and $locdetail != ''">		
						<xsl:text>, </xsl:text>
					</xsl:if>
				<xsl:value-of select="$locdetail" />			</xsl:element> 
		</xsl:if>  	                       </xsl:template>
<!-- this combines MESSAGE and NOTE and DONOR into the 952$x --><xsl:template name="notecombiner">	<xsl:param name="note" />
	<xsl:param name="note2" />	<xsl:param name="message" />
        <xsl:param name="donor" />
		<xsl:if test="$note != '' or $message != '' or $note2 != '' or $donor != ''">			
			<xsl:element name="subfield">				<xsl:attribute name="code">x</xsl:attribute>
				<xsl:value-of select="$note" />
					<xsl:if test="$note != '' and $note2 != ''">
						<xsl:text>; </xsl:text>					
					</xsl:if>
				<xsl:value-of select="$note2" />
					<xsl:if test="($note != '' or $note2 != '') and $message !=''">
						<xsl:text>; </xsl:text>					
					</xsl:if>
					<xsl:if test="$message != ''">
						<xsl:text>msg: </xsl:text>
					</xsl:if>
				<xsl:value-of select="$message" />
					<xsl:if test="($note != '' or $note2 != '' or $message !='') and $donor !=''">
						<xsl:text>; </xsl:text>					
					</xsl:if>
					<xsl:if test="$donor != ''">
						<xsl:text>donor: </xsl:text>
					</xsl:if>
				<xsl:value-of select="$donor" />			</xsl:element> 
		</xsl:if>  	                       </xsl:template><xsl:template name="dateprocessing">	<xsl:param name="date"/>	<xsl:choose>		<xsl:when test="contains($date, '-9')">				<xsl:variable name='date2a' select="substring($date, 1,5)"/>			<xsl:variable name='date2b' select="substring($date, 7,8)"/>			<xsl:variable name='date2' select="concat('19', $date2b, '-', $date2a)"/>			<xsl:value-of select="$date2" />		</xsl:when>		<xsl:when test="$date = '  -  -  '"></xsl:when>		<xsl:otherwise>			<xsl:variable name='date3a' select="substring($date, 1, 5)"/>			<xsl:variable name='date3b' select="substring($date, 7, 4)"/>			<xsl:variable name='date3' select="concat($date3b, '-', $date3a)"/>				<xsl:value-of select="$date3"/>		</xsl:otherwise>	</xsl:choose></xsl:template>    </xsl:stylesheet>
